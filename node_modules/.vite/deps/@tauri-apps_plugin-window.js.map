{
  "version": 3,
  "sources": ["../../@tauri-apps/plugin-window/node_modules/@tauri-apps/api/chunk-WVIOQTRJ.js", "../../@tauri-apps/plugin-window/node_modules/@tauri-apps/api/chunk-VMGITBBQ.js", "../../@tauri-apps/plugin-window/node_modules/@tauri-apps/api/chunk-4EPV3FVZ.js", "../../@tauri-apps/plugin-window/dist-js/index.mjs"],
  "sourcesContent": ["var f=Object.defineProperty;var g=(a,b)=>{for(var c in b)f(a,c,{get:b[c],enumerable:!0})};var e=(a,b,c)=>{if(!b.has(a))throw TypeError(\"Cannot \"+c)};var h=(a,b,c)=>(e(a,b,\"read from private field\"),c?c.call(a):b.get(a)),i=(a,b,c)=>{if(b.has(a))throw TypeError(\"Cannot add the same private member more than once\");b instanceof WeakSet?b.add(a):b.set(a,c)},j=(a,b,c,d)=>(e(a,b,\"write to private field\"),d?d.call(a,c):b.set(a,c),c);export{g as a,h as b,i as c,j as d};\n", "import{a as w,b as l,c as p,d as v}from\"./chunk-WVIOQTRJ.js\";var h={};w(h,{Channel:()=>o,PluginListener:()=>a,addPluginListener:()=>m,convertFileSrc:()=>y,invoke:()=>u,transformCallback:()=>s});function f(){return window.crypto.getRandomValues(new Uint32Array(1))[0]}function s(n,e=!1){let t=f(),r=`_${t}`;return Object.defineProperty(window,r,{value:c=>(e&&Reflect.deleteProperty(window,r),n?.(c)),writable:!1,configurable:!0}),t}var i,o=class{constructor(){this.__TAURI_CHANNEL_MARKER__=!0;p(this,i,()=>{});this.id=s(e=>{l(this,i).call(this,e)})}set onmessage(e){v(this,i,e)}get onmessage(){return l(this,i)}toJSON(){return`__CHANNEL__:${this.id}`}};i=new WeakMap;var a=class{constructor(e,t,r){this.plugin=e,this.event=t,this.channelId=r}async unregister(){return u(`plugin:${this.plugin}|remove_listener`,{event:this.event,channelId:this.channelId})}};async function m(n,e,t){let r=new o;return r.onmessage=t,u(`plugin:${n}|register_listener`,{event:e,handler:r}).then(()=>new a(n,e,r.id))}async function u(n,e={},t){return new Promise((r,c)=>{let g=s(d=>{r(d),Reflect.deleteProperty(window,`_${_}`)},!0),_=s(d=>{c(d),Reflect.deleteProperty(window,`_${g}`)},!0);window.__TAURI_IPC__({cmd:n,callback:g,error:_,payload:e,options:t})})}function y(n,e=\"asset\"){return window.__TAURI__.convertFileSrc(n,e)}export{s as a,o as b,a as c,m as d,u as e,y as f,h as g};\n", "import{a as o,e as a}from\"./chunk-VMGITBBQ.js\";import{a as O}from\"./chunk-WVIOQTRJ.js\";var E={};O(E,{TauriEvent:()=>l,emit:()=>D,listen:()=>c,once:()=>W});var l=(e=>(e.WINDOW_RESIZED=\"tauri://resize\",e.WINDOW_MOVED=\"tauri://move\",e.WINDOW_CLOSE_REQUESTED=\"tauri://close-requested\",e.WINDOW_CREATED=\"tauri://window-created\",e.WINDOW_DESTROYED=\"tauri://destroyed\",e.WINDOW_FOCUS=\"tauri://focus\",e.WINDOW_BLUR=\"tauri://blur\",e.WINDOW_SCALE_FACTOR_CHANGED=\"tauri://scale-change\",e.WINDOW_THEME_CHANGED=\"tauri://theme-changed\",e.WINDOW_FILE_DROP=\"tauri://file-drop\",e.WINDOW_FILE_DROP_HOVER=\"tauri://file-drop-hover\",e.WINDOW_FILE_DROP_CANCELLED=\"tauri://file-drop-cancelled\",e.MENU=\"tauri://menu\",e))(l||{});async function s(n,t){await a(\"plugin:event|unlisten\",{event:n,eventId:t})}async function c(n,t,i){return a(\"plugin:event|listen\",{event:n,windowLabel:i?.target,handler:o(t)}).then(r=>async()=>s(n,r))}async function W(n,t,i){return c(n,r=>{t(r),s(n,r.id).catch(()=>{})},i)}async function D(n,t,i){await a(\"plugin:event|emit\",{event:n,windowLabel:i?.target,payload:t})}export{l as a,c as b,W as c,D as d,E as e};\n", "import { listen, once, emit, TauriEvent } from '@tauri-apps/api/event';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * A size represented in logical pixels.\n *\n * @since 2.0.0\n */\nclass LogicalSize {\n    constructor(width, height) {\n        this.type = \"Logical\";\n        this.width = width;\n        this.height = height;\n    }\n}\n/**\n * A size represented in physical pixels.\n *\n * @since 2.0.0\n */\nclass PhysicalSize {\n    constructor(width, height) {\n        this.type = \"Physical\";\n        this.width = width;\n        this.height = height;\n    }\n    /**\n     * Converts the physical size to a logical one.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/plugin-window';\n     * const appWindow = getCurrent();\n     * const factor = await appWindow.scaleFactor();\n     * const size = await appWindow.innerSize();\n     * const logical = size.toLogical(factor);\n     * ```\n     *  */\n    toLogical(scaleFactor) {\n        return new LogicalSize(this.width / scaleFactor, this.height / scaleFactor);\n    }\n}\n/**\n *  A position represented in logical pixels.\n *\n * @since 2.0.0\n */\nclass LogicalPosition {\n    constructor(x, y) {\n        this.type = \"Logical\";\n        this.x = x;\n        this.y = y;\n    }\n}\n/**\n *  A position represented in physical pixels.\n *\n * @since 2.0.0\n */\nclass PhysicalPosition {\n    constructor(x, y) {\n        this.type = \"Physical\";\n        this.x = x;\n        this.y = y;\n    }\n    /**\n     * Converts the physical position to a logical one.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/plugin-window';\n     * const appWindow = getCurrent();\n     * const factor = await appWindow.scaleFactor();\n     * const position = await appWindow.innerPosition();\n     * const logical = position.toLogical(factor);\n     * ```\n     * */\n    toLogical(scaleFactor) {\n        return new LogicalPosition(this.x / scaleFactor, this.y / scaleFactor);\n    }\n}\n/**\n * Attention type to request on a window.\n *\n * @since 2.0.0\n */\nvar UserAttentionType;\n(function (UserAttentionType) {\n    /**\n     * #### Platform-specific\n     * - **macOS:** Bounces the dock icon until the application is in focus.\n     * - **Windows:** Flashes both the window and the taskbar button until the application is in focus.\n     */\n    UserAttentionType[UserAttentionType[\"Critical\"] = 1] = \"Critical\";\n    /**\n     * #### Platform-specific\n     * - **macOS:** Bounces the dock icon once.\n     * - **Windows:** Flashes the taskbar button until the application is in focus.\n     */\n    UserAttentionType[UserAttentionType[\"Informational\"] = 2] = \"Informational\";\n})(UserAttentionType || (UserAttentionType = {}));\nclass CloseRequestedEvent {\n    constructor(event) {\n        this._preventDefault = false;\n        this.event = event.event;\n        this.windowLabel = event.windowLabel;\n        this.id = event.id;\n    }\n    preventDefault() {\n        this._preventDefault = true;\n    }\n    isPreventDefault() {\n        return this._preventDefault;\n    }\n}\n/**\n * Get an instance of `Window` for the current window.\n *\n * @since 2.0.0\n */\nfunction getCurrent() {\n    return new Window(window.__TAURI_METADATA__.__currentWindow.label, {\n        // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n        skip: true,\n    });\n}\n/**\n * Gets a list of instances of `Window` for all available windows.\n *\n * @since 2.0.0\n */\nfunction getAll() {\n    return window.__TAURI_METADATA__.__windows.map((w) => new Window(w.label, {\n        // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n        skip: true,\n    }));\n}\n/** @ignore */\n// events that are emitted right here instead of by the created webview\nconst localTauriEvents = [\"tauri://created\", \"tauri://error\"];\n/**\n * Create new webview window or get a handle to an existing one.\n *\n * Windows are identified by a *label*  a unique identifier that can be used to reference it later.\n * It may only contain alphanumeric characters `a-zA-Z` plus the following special characters `-`, `/`, `:` and `_`.\n *\n * @example\n * ```typescript\n * // loading embedded asset:\n * const appWindow = new Window('theUniqueLabel', {\n *   url: 'path/to/page.html'\n * });\n * // alternatively, load a remote URL:\n * const appWindow = new Window('theUniqueLabel', {\n *   url: 'https://github.com/tauri-apps/tauri'\n * });\n *\n * appWindow.once('tauri://created', function () {\n *  // window successfully created\n * });\n * appWindow.once('tauri://error', function (e) {\n *  // an error happened creating the window\n * });\n *\n * // emit an event to the backend\n * await appWindow.emit(\"some event\", \"data\");\n * // listen to an event from the backend\n * const unlisten = await appWindow.listen(\"event name\", e => {});\n * unlisten();\n * ```\n *\n * @since 2.0.0\n */\nclass Window {\n    /**\n     * Creates a new Window.\n     * @example\n     * ```typescript\n     * import { Window } from '@tauri-apps/plugin-window';\n     * const appWindow = new Window('my-label', {\n     *   url: 'https://github.com/tauri-apps/tauri'\n     * });\n     * appWindow.once('tauri://created', function () {\n     *  // window successfully created\n     * });\n     * appWindow.once('tauri://error', function (e) {\n     *  // an error happened creating the window\n     * });\n     * ```\n     *\n     * @param label The unique webview window label. Must be alphanumeric: `a-zA-Z-/:_`.\n     * @returns The {@link Window} instance to communicate with the webview.\n     *\n     * @since 2.0.0\n     */\n    constructor(label, options = {}) {\n        this.label = label;\n        this.listeners = Object.create(null);\n        // @ts-expect-error `skip` is not a public API so it is not defined in WindowOptions\n        if (!(options === null || options === void 0 ? void 0 : options.skip)) {\n            window\n                .__TAURI_INVOKE__(\"plugin:window|create\", {\n                options: {\n                    ...options,\n                    label,\n                },\n            })\n                .then(async () => this.emit(\"tauri://created\"))\n                .catch(async (e) => this.emit(\"tauri://error\", e));\n        }\n    }\n    /**\n     * Gets the Window for the webview associated with the given label.\n     * @example\n     * ```typescript\n     * import { Window } from '@tauri-apps/plugin-window';\n     * const mainWindow = Window.getByLabel('main');\n     * ```\n     *\n     * @param label The webview window label.\n     * @returns The Window instance to communicate with the webview or null if the webview doesn't exist.\n     *\n     * @since 2.0.0\n     */\n    static getByLabel(label) {\n        if (getAll().some((w) => w.label === label)) {\n            // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n            return new Window(label, { skip: true });\n        }\n        return null;\n    }\n    /**\n     * Get an instance of `Window` for the current window.\n     *\n     * @since 2.0.0\n     */\n    static getCurrent() {\n        return getCurrent();\n    }\n    /**\n     * Gets a list of instances of `Window` for all available windows.\n     *\n     * @since 2.0.0\n     */\n    static getAll() {\n        return getAll();\n    }\n    /**\n     *  Gets the focused window.\n     * @example\n     * ```typescript\n     * import { Window } from '@tauri-apps/plugin-window';\n     * const focusedWindow = Window.getFocusedWindow();\n     * ```\n     *\n     * @returns The Window instance to communicate with the webview or `undefined` if there is not any focused window.\n     *\n     * @since 1.4\n     */\n    static async getFocusedWindow() {\n        for (const w of getAll()) {\n            if (await w.isFocused()) {\n                return w;\n            }\n        }\n        return null;\n    }\n    /**\n     * Listen to an event emitted by the backend that is tied to the webview window.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/plugin-window';\n     * const unlisten = await getCurrent().listen<string>('state-changed', (event) => {\n     *   console.log(`Got error: ${payload}`);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n     * @param handler Event handler.\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     *\n     * @since 2.0.0\n     */\n    async listen(event, handler) {\n        if (this._handleTauriEvent(event, handler)) {\n            return Promise.resolve(() => {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, security/detect-object-injection\n                const listeners = this.listeners[event];\n                listeners.splice(listeners.indexOf(handler), 1);\n            });\n        }\n        return listen(event, handler, { target: this.label });\n    }\n    /**\n     * Listen to an one-off event emitted by the backend that is tied to the webview window.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/plugin-window';\n     * const unlisten = await getCurrent().once<null>('initialized', (event) => {\n     *   console.log(`Window initialized!`);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n     * @param handler Event handler.\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     *\n     * @since 2.0.0\n     */\n    async once(event, handler) {\n        if (this._handleTauriEvent(event, handler)) {\n            return Promise.resolve(() => {\n                // eslint-disable-next-line security/detect-object-injection\n                const listeners = this.listeners[event];\n                listeners.splice(listeners.indexOf(handler), 1);\n            });\n        }\n        return once(event, handler, { target: this.label });\n    }\n    /**\n     * Emits an event to the backend, tied to the webview window.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/plugin-window';\n     * await getCurrent().emit('window-loaded', { loggedIn: true, token: 'authToken' });\n     * ```\n     *\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n     * @param payload Event payload.\n     */\n    async emit(event, payload) {\n        if (localTauriEvents.includes(event)) {\n            // eslint-disable-next-line\n            for (const handler of this.listeners[event] || []) {\n                handler({ event, id: -1, windowLabel: this.label, payload });\n            }\n            return Promise.resolve();\n        }\n        return emit(event, payload, { target: this.label });\n    }\n    /** @ignore */\n    _handleTauriEvent(event, handler) {\n        if (localTauriEvents.includes(event)) {\n            if (!(event in this.listeners)) {\n                // eslint-disable-next-line\n                this.listeners[event] = [handler];\n            }\n            else {\n                // eslint-disable-next-line\n                this.listeners[event].push(handler);\n            }\n            return true;\n        }\n        return false;\n    }\n    // Getters\n    /**\n     * The scale factor that can be used to map physical pixels to logical pixels.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/plugin-window';\n     * const factor = await getCurrent().scaleFactor();\n     * ```\n     *\n     * @returns The window's monitor scale factor.\n     *\n     * @since 2.0.0\n     * */\n    async scaleFactor() {\n        return window.__TAURI_INVOKE__(\"plugin:window|scale_factor\", {\n            label: this.label,\n        });\n    }\n    /**\n     * The position of the top-left hand corner of the window's client area relative to the top-left hand corner of the desktop.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/plugin-window';\n     * const position = await getCurrent().innerPosition();\n     * ```\n     *\n     * @returns The window's inner position.\n     *\n     * @since 2.0.0\n     *  */\n    async innerPosition() {\n        return window\n            .__TAURI_INVOKE__(\"plugin:window|inner_position\", {\n            label: this.label,\n        })\n            .then(({ x, y }) => new PhysicalPosition(x, y));\n    }\n    /**\n     * The position of the top-left hand corner of the window relative to the top-left hand corner of the desktop.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/plugin-window';\n     * const position = await getCurrent().outerPosition();\n     * ```\n     *\n     * @returns The window's outer position.\n     *\n     * @since 2.0.0\n     *  */\n    async outerPosition() {\n        return window\n            .__TAURI_INVOKE__(\"plugin:window|outer_position\", {\n            label: this.label,\n        })\n            .then(({ x, y }) => new PhysicalPosition(x, y));\n    }\n    /**\n     * The physical size of the window's client area.\n     * The client area is the content of the window, excluding the title bar and borders.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/plugin-window';\n     * const size = await getCurrent().innerSize();\n     * ```\n     *\n     * @returns The window's inner size.\n     *\n     * @since 2.0.0\n     */\n    async innerSize() {\n        return window\n            .__TAURI_INVOKE__(\"plugin:window|inner_size\", {\n            label: this.label,\n        })\n            .then(({ width, height }) => new PhysicalSize(width, height));\n    }\n    /**\n     * The physical size of the entire window.\n     * These dimensions include the title bar and borders. If you don't want that (and you usually don't), use inner_size instead.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/plugin-window';\n     * const size = await getCurrent().outerSize();\n     * ```\n     *\n     * @returns The window's outer size.\n     *\n     * @since 2.0.0\n     */\n    async outerSize() {\n        return window\n            .__TAURI_INVOKE__(\"plugin:window|outer_size\", {\n            label: this.label,\n        })\n            .then(({ width, height }) => new PhysicalSize(width, height));\n    }\n    /**\n     * Gets the window's current fullscreen state.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/plugin-window';\n     * const fullscreen = await getCurrent().isFullscreen();\n     * ```\n     *\n     * @returns Whether the window is in fullscreen mode or not.\n     *\n     * @since 2.0.0\n     *  */\n    async isFullscreen() {\n        return window.__TAURI_INVOKE__(\"plugin:window|is_fullscreen\", {\n            label: this.label,\n        });\n    }\n    /**\n     * Gets the window's current minimized state.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/plugin-window';\n     * const minimized = await getCurrent().isMinimized();\n     * ```\n     *\n     * @since 2.0.0\n     * */\n    async isMinimized() {\n        return window.__TAURI_INVOKE__(\"plugin:window|is_minimized\", {\n            label: this.label,\n        });\n    }\n    /**\n     * Gets the window's current maximized state.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/plugin-window';\n     * const maximized = await getCurrent().isMaximized();\n     * ```\n     *\n     * @returns Whether the window is maximized or not.\n     *\n     * @since 2.0.0\n     * */\n    async isMaximized() {\n        return window.__TAURI_INVOKE__(\"plugin:window|is_maximized\", {\n            label: this.label,\n        });\n    }\n    /**\n     * Gets the window's current focus state.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/plugin-window';\n     * const focused = await getCurrent().isFocused();\n     * ```\n     *\n     * @returns Whether the window is focused or not.\n     *\n     * @since 2.0.0\n     * */\n    async isFocused() {\n        return window.__TAURI_INVOKE__(\"plugin:window|is_focused\", {\n            label: this.label,\n        });\n    }\n    /**\n     * Gets the window's current decorated state.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/plugin-window';\n     * const decorated = await getCurrent().isDecorated();\n     * ```\n     *\n     * @returns Whether the window is decorated or not.\n     *\n     * @since 2.0.0\n     *  */\n    async isDecorated() {\n        return window.__TAURI_INVOKE__(\"plugin:window|is_decorated\", {\n            label: this.label,\n        });\n    }\n    /**\n     * Gets the window's current resizable state.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/plugin-window';\n     * const resizable = await getCurrent().isResizable();\n     * ```\n     *\n     * @returns Whether the window is resizable or not.\n     *\n     * @since 2.0.0\n     *  */\n    async isResizable() {\n        return window.__TAURI_INVOKE__(\"plugin:window|is_resizable\", {\n            label: this.label,\n        });\n    }\n    /**\n     * Gets the window’s native maximize button state.\n     *\n     * #### Platform-specific\n     *\n     * - **Linux / iOS / Android:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/plugin-window';\n     * const maximizable = await getCurrent().isMaximizable();\n     * ```\n     *\n     * @returns Whether the window's native maximize button is enabled or not.\n     *  */\n    async isMaximizable() {\n        return window.__TAURI_INVOKE__(\"plugin:window|is_maximizable\", {\n            label: this.label,\n        });\n    }\n    /**\n     * Gets the window’s native minimize button state.\n     *\n     * #### Platform-specific\n     *\n     * - **Linux / iOS / Android:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/plugin-window';\n     * const minimizable = await getCurrent().isMinimizable();\n     * ```\n     *\n     * @returns Whether the window's native minimize button is enabled or not.\n     *  */\n    async isMinimizable() {\n        return window.__TAURI_INVOKE__(\"plugin:window|is_minimizable\", {\n            label: this.label,\n        });\n    }\n    /**\n     * Gets the window’s native close button state.\n     *\n     * #### Platform-specific\n     *\n     * - **iOS / Android:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/plugin-window';\n     * const closable = await getCurrent().isClosable();\n     * ```\n     *\n     * @returns Whether the window's native close button is enabled or not.\n     *  */\n    async isClosable() {\n        return window.__TAURI_INVOKE__(\"plugin:window|is_closable\", {\n            label: this.label,\n        });\n    }\n    /**\n     * Gets the window's current visible state.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/plugin-window';\n     * const visible = await getCurrent().isVisible();\n     * ```\n     *\n     * @returns Whether the window is visible or not.\n     *\n     * @since 2.0.0\n     *  */\n    async isVisible() {\n        return window.__TAURI_INVOKE__(\"plugin:window|is_visible\", {\n            label: this.label,\n        });\n    }\n    /**\n     * Gets the window's current title.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/plugin-window';\n     * const title = await getCurrent().title();\n     * ```\n     *\n     * @since 2.0.0\n     * */\n    async title() {\n        return window.__TAURI_INVOKE__(\"plugin:window|title\", {\n            label: this.label,\n        });\n    }\n    /**\n     * Gets the window's current theme.\n     *\n     * #### Platform-specific\n     *\n     * - **macOS:** Theme was introduced on macOS 10.14. Returns `light` on macOS 10.13 and below.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/plugin-window';\n     * const theme = await getCurrent().theme();\n     * ```\n     *\n     * @returns The window theme.\n     *\n     * @since 2.0.0\n     * */\n    async theme() {\n        return window.__TAURI_INVOKE__(\"plugin:window|theme\", {\n            label: this.label,\n        });\n    }\n    // Setters\n    /**\n     * Centers the window.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/plugin-window';\n     * await getCurrent().center();\n     * ```\n     *\n     * @param resizable\n     * @returns A promise indicating the success or failure of the operation.\n     *\n     * @since 2.0.0\n     */\n    async center() {\n        return window.__TAURI_INVOKE__(\"plugin:window|center\", {\n            label: this.label,\n        });\n    }\n    /**\n     *  Requests user attention to the window, this has no effect if the application\n     * is already focused. How requesting for user attention manifests is platform dependent,\n     * see `UserAttentionType` for details.\n     *\n     * Providing `null` will unset the request for user attention. Unsetting the request for\n     * user attention might not be done automatically by the WM when the window receives input.\n     *\n     * #### Platform-specific\n     *\n     * - **macOS:** `null` has no effect.\n     * - **Linux:** Urgency levels have the same effect.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/plugin-window';\n     * await getCurrent().requestUserAttention();\n     * ```\n     *\n     * @param requestType\n     * @returns A promise indicating the success or failure of the operation.\n     *\n     * @since 2.0.0\n     */\n    async requestUserAttention(requestType) {\n        let requestType_ = null;\n        if (requestType) {\n            if (requestType === UserAttentionType.Critical) {\n                requestType_ = { type: \"Critical\" };\n            }\n            else {\n                requestType_ = { type: \"Informational\" };\n            }\n        }\n        return window.__TAURI_INVOKE__(\"plugin:window|request_user_attention\", {\n            label: this.label,\n            value: requestType_,\n        });\n    }\n    /**\n     * Updates the window resizable flag.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/plugin-window';\n     * await getCurrent().setResizable(false);\n     * ```\n     *\n     * @param resizable\n     * @returns A promise indicating the success or failure of the operation.\n     *\n     * @since 2.0.0\n     */\n    async setResizable(resizable) {\n        return window.__TAURI_INVOKE__(\"plugin:window|set_resizable\", {\n            label: this.label,\n            value: resizable,\n        });\n    }\n    /**\n     * Sets whether the window's native maximize button is enabled or not.\n     * If resizable is set to false, this setting is ignored.\n     *\n     * #### Platform-specific\n     *\n     * - **macOS:** Disables the \"zoom\" button in the window titlebar, which is also used to enter fullscreen mode.\n     * - **Linux / iOS / Android:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/plugin-window';\n     * await getCurrent().setMaximizable(false);\n     * ```\n     *\n     * @param maximizable\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setMaximizable(maximizable) {\n        return window.__TAURI_INVOKE__(\"plugin:window|set_maximizable\", {\n            label: this.label,\n            value: maximizable,\n        });\n    }\n    /**\n     * Sets whether the window's native minimize button is enabled or not.\n     *\n     * #### Platform-specific\n     *\n     * - **Linux / iOS / Android:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/plugin-window';\n     * await getCurrent().setMinimizable(false);\n     * ```\n     *\n     * @param minimizable\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setMinimizable(minimizable) {\n        return window.__TAURI_INVOKE__(\"plugin:window|set_minimizable\", {\n            label: this.label,\n            value: minimizable,\n        });\n    }\n    /**\n     * Sets whether the window's native close button is enabled or not.\n     *\n     * #### Platform-specific\n     *\n     * - **Linux:** GTK+ will do its best to convince the window manager not to show a close button. Depending on the system, this function may not have any effect when called on a window that is already visible\n     * - **iOS / Android:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/plugin-window';\n     * await getCurrent().setClosable(false);\n     * ```\n     *\n     * @param closable\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setClosable(closable) {\n        return window.__TAURI_INVOKE__(\"plugin:window|set_closable\", {\n            label: this.label,\n            value: closable,\n        });\n    }\n    /**\n     * Sets the window title.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/plugin-window';\n     * await getCurrent().setTitle('Tauri');\n     * ```\n     *\n     * @param title The new title\n     * @returns A promise indicating the success or failure of the operation.\n     *\n     * @since 2.0.0\n     */\n    async setTitle(title) {\n        return window.__TAURI_INVOKE__(\"plugin:window|set_title\", {\n            label: this.label,\n            value: title,\n        });\n    }\n    /**\n     * Maximizes the window.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/plugin-window';\n     * await getCurrent().maximize();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     *\n     * @since 2.0.0\n     */\n    async maximize() {\n        return window.__TAURI_INVOKE__(\"plugin:window|maximize\", {\n            label: this.label,\n        });\n    }\n    /**\n     * Unmaximizes the window.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/plugin-window';\n     * await getCurrent().unmaximize();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     *\n     * @since 2.0.0\n     */\n    async unmaximize() {\n        return window.__TAURI_INVOKE__(\"plugin:window|unmaximize\", {\n            label: this.label,\n        });\n    }\n    /**\n     * Toggles the window maximized state.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/plugin-window';\n     * await getCurrent().toggleMaximize();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     *\n     * @since 2.0.0\n     */\n    async toggleMaximize() {\n        return window.__TAURI_INVOKE__(\"plugin:window|toggle_maximize\", {\n            label: this.label,\n        });\n    }\n    /**\n     * Minimizes the window.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/plugin-window';\n     * await getCurrent().minimize();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     *\n     * @since 2.0.0\n     */\n    async minimize() {\n        return window.__TAURI_INVOKE__(\"plugin:window|minimize\", {\n            label: this.label,\n        });\n    }\n    /**\n     * Unminimizes the window.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/plugin-window';\n     * await getCurrent().unminimize();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     *\n     * @since 2.0.0\n     */\n    async unminimize() {\n        return window.__TAURI_INVOKE__(\"plugin:window|unminimize\", {\n            label: this.label,\n        });\n    }\n    /**\n     * Sets the window visibility to true.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/plugin-window';\n     * await getCurrent().show();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     *\n     * @since 2.0.0\n     */\n    async show() {\n        return window.__TAURI_INVOKE__(\"plugin:window|show\", {\n            label: this.label,\n        });\n    }\n    /**\n     * Sets the window visibility to false.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/plugin-window';\n     * await getCurrent().hide();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     *\n     * @since 2.0.0\n     */\n    async hide() {\n        return window.__TAURI_INVOKE__(\"plugin:window|hide\", {\n            label: this.label,\n        });\n    }\n    /**\n     * Closes the window.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/plugin-window';\n     * await getCurrent().close();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     *\n     * @since 2.0.0\n     */\n    async close() {\n        return window.__TAURI_INVOKE__(\"plugin:window|close\", {\n            label: this.label,\n        });\n    }\n    /**\n     * Whether the window should have borders and bars.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/plugin-window';\n     * await getCurrent().setDecorations(false);\n     * ```\n     *\n     * @param decorations Whether the window should have borders and bars.\n     * @returns A promise indicating the success or failure of the operation.\n     *\n     * @since 2.0.0\n     */\n    async setDecorations(decorations) {\n        return window.__TAURI_INVOKE__(\"plugin:window|set_decorations\", {\n            label: this.label,\n            value: decorations,\n        });\n    }\n    /**\n     * Whether or not the window should have shadow.\n     *\n     * #### Platform-specific\n     *\n     * - **Windows:**\n     *   - `false` has no effect on decorated window, shadows are always ON.\n     *   - `true` will make ndecorated window have a 1px white border,\n     * and on Windows 11, it will have a rounded corners.\n     * - **Linux:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/plugin-window';\n     * await getCurrent().setShadow(false);\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     *\n     * @since 2.0.0\n     */\n    async setShadow(enable) {\n        return window.__TAURI_INVOKE__(\"plugin:window|set_shadow\", {\n            label: this.label,\n            value: enable,\n        });\n    }\n    /**\n     * Set window effects.\n     *\n     * @since 2.0\n     */\n    async setEffects(effects) {\n        return window.__TAURI_INVOKE__(\"plugin:window|set_effects\", {\n            label: this.label,\n            value: effects,\n        });\n    }\n    /**\n     * Clear any applied effects if possible.\n     *\n     * @since 2.0\n     */\n    async clearEffects() {\n        return window.__TAURI_INVOKE__(\"plugin:window|set_effects\", {\n            label: this.label,\n            value: null,\n        });\n    }\n    /**\n     * Whether the window should always be on top of other windows.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/plugin-window';\n     * await getCurrent().setAlwaysOnTop(true);\n     * ```\n     *\n     * @param alwaysOnTop Whether the window should always be on top of other windows or not.\n     * @returns A promise indicating the success or failure of the operation.\n     *\n     * @since 2.0.0\n     */\n    async setAlwaysOnTop(alwaysOnTop) {\n        return window.__TAURI_INVOKE__(\"plugin:window|set_always_on_top\", {\n            label: this.label,\n            value: alwaysOnTop,\n        });\n    }\n    /**\n     * Prevents the window contents from being captured by other apps.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/plugin-window';\n     * await getCurrent().setContentProtected(true);\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     *\n     * @since 2.0.0\n     */\n    async setContentProtected(protected_) {\n        return window.__TAURI_INVOKE__(\"plugin:window|set_content_protected\", {\n            label: this.label,\n            value: protected_,\n        });\n    }\n    /**\n     * Resizes the window with a new inner size.\n     * @example\n     * ```typescript\n     * import { getCurrent, LogicalSize } from '@tauri-apps/plugin-window';\n     * await getCurrent().setSize(new LogicalSize(600, 500));\n     * ```\n     *\n     * @param size The logical or physical inner size.\n     * @returns A promise indicating the success or failure of the operation.\n     *\n     * @since 2.0.0\n     */\n    async setSize(size) {\n        if (!size || (size.type !== \"Logical\" && size.type !== \"Physical\")) {\n            throw new Error(\"the `size` argument must be either a LogicalSize or a PhysicalSize instance\");\n        }\n        return window.__TAURI_INVOKE__(\"plugin:window|set_size\", {\n            label: this.label,\n            value: {\n                type: size.type,\n                data: {\n                    width: size.width,\n                    height: size.height,\n                },\n            },\n        });\n    }\n    /**\n     * Sets the window minimum inner size. If the `size` argument is not provided, the constraint is unset.\n     * @example\n     * ```typescript\n     * import { getCurrent, PhysicalSize } from '@tauri-apps/plugin-window';\n     * await getCurrent().setMinSize(new PhysicalSize(600, 500));\n     * ```\n     *\n     * @param size The logical or physical inner size, or `null` to unset the constraint.\n     * @returns A promise indicating the success or failure of the operation.\n     *\n     * @since 2.0.0\n     */\n    async setMinSize(size) {\n        if (size && size.type !== \"Logical\" && size.type !== \"Physical\") {\n            throw new Error(\"the `size` argument must be either a LogicalSize or a PhysicalSize instance\");\n        }\n        return window.__TAURI_INVOKE__(\"plugin:window|set_min_size\", {\n            label: this.label,\n            value: size\n                ? {\n                    type: size.type,\n                    data: {\n                        width: size.width,\n                        height: size.height,\n                    },\n                }\n                : null,\n        });\n    }\n    /**\n     * Sets the window maximum inner size. If the `size` argument is undefined, the constraint is unset.\n     * @example\n     * ```typescript\n     * import { getCurrent, LogicalSize } from '@tauri-apps/plugin-window';\n     * await getCurrent().setMaxSize(new LogicalSize(600, 500));\n     * ```\n     *\n     * @param size The logical or physical inner size, or `null` to unset the constraint.\n     * @returns A promise indicating the success or failure of the operation.\n     *\n     * @since 2.0.0\n     */\n    async setMaxSize(size) {\n        if (size && size.type !== \"Logical\" && size.type !== \"Physical\") {\n            throw new Error(\"the `size` argument must be either a LogicalSize or a PhysicalSize instance\");\n        }\n        return window.__TAURI_INVOKE__(\"plugin:window|set_max_size\", {\n            label: this.label,\n            value: size\n                ? {\n                    type: size.type,\n                    data: {\n                        width: size.width,\n                        height: size.height,\n                    },\n                }\n                : null,\n        });\n    }\n    /**\n     * Sets the window outer position.\n     * @example\n     * ```typescript\n     * import { getCurrent, LogicalPosition } from '@tauri-apps/plugin-window';\n     * await getCurrent().setPosition(new LogicalPosition(600, 500));\n     * ```\n     *\n     * @param position The new position, in logical or physical pixels.\n     * @returns A promise indicating the success or failure of the operation.\n     *\n     * @since 2.0.0\n     */\n    async setPosition(position) {\n        if (!position ||\n            (position.type !== \"Logical\" && position.type !== \"Physical\")) {\n            throw new Error(\"the `position` argument must be either a LogicalPosition or a PhysicalPosition instance\");\n        }\n        return window.__TAURI_INVOKE__(\"plugin:window|set_position\", {\n            label: this.label,\n            value: {\n                type: position.type,\n                data: {\n                    x: position.x,\n                    y: position.y,\n                },\n            },\n        });\n    }\n    /**\n     * Sets the window fullscreen state.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/plugin-window';\n     * await getCurrent().setFullscreen(true);\n     * ```\n     *\n     * @param fullscreen Whether the window should go to fullscreen or not.\n     * @returns A promise indicating the success or failure of the operation.\n     *\n     * @since 2.0.0\n     */\n    async setFullscreen(fullscreen) {\n        return window.__TAURI_INVOKE__(\"plugin:window|set_fullscreen\", {\n            label: this.label,\n            value: fullscreen,\n        });\n    }\n    /**\n     * Bring the window to front and focus.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/plugin-window';\n     * await getCurrent().setFocus();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     *\n     * @since 2.0.0\n     */\n    async setFocus() {\n        return window.__TAURI_INVOKE__(\"plugin:window|set_focus\", {\n            label: this.label,\n        });\n    }\n    /**\n     * Sets the window icon.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/plugin-window';\n     * await getCurrent().setIcon('/tauri/awesome.png');\n     * ```\n     *\n     * Note that you need the `icon-ico` or `icon-png` Cargo features to use this API.\n     * To enable it, change your Cargo.toml file:\n     * ```toml\n     * [dependencies]\n     * tauri = { version = \"...\", features = [\"...\", \"icon-png\"] }\n     * ```\n     *\n     * @param icon Icon bytes or path to the icon file.\n     * @returns A promise indicating the success or failure of the operation.\n     *\n     * @since 2.0.0\n     */\n    async setIcon(icon) {\n        return window.__TAURI_INVOKE__(\"plugin:window|set_icon\", {\n            label: this.label,\n            value: typeof icon === \"string\" ? icon : Array.from(icon),\n        });\n    }\n    /**\n     * Whether the window icon should be hidden from the taskbar or not.\n     *\n     * #### Platform-specific\n     *\n     * - **macOS:** Unsupported.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/plugin-window';\n     * await getCurrent().setSkipTaskbar(true);\n     * ```\n     *\n     * @param skip true to hide window icon, false to show it.\n     * @returns A promise indicating the success or failure of the operation.\n     *\n     * @since 2.0.0\n     */\n    async setSkipTaskbar(skip) {\n        return window.__TAURI_INVOKE__(\"plugin:window|set_skip_taskbar\", {\n            label: this.label,\n            value: skip,\n        });\n    }\n    /**\n     * Grabs the cursor, preventing it from leaving the window.\n     *\n     * There's no guarantee that the cursor will be hidden. You should\n     * hide it by yourself if you want so.\n     *\n     * #### Platform-specific\n     *\n     * - **Linux:** Unsupported.\n     * - **macOS:** This locks the cursor in a fixed location, which looks visually awkward.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/plugin-window';\n     * await getCurrent().setCursorGrab(true);\n     * ```\n     *\n     * @param grab `true` to grab the cursor icon, `false` to release it.\n     * @returns A promise indicating the success or failure of the operation.\n     *\n     * @since 2.0.0\n     */\n    async setCursorGrab(grab) {\n        return window.__TAURI_INVOKE__(\"plugin:window|set_cursor_grab\", {\n            label: this.label,\n            value: grab,\n        });\n    }\n    /**\n     * Modifies the cursor's visibility.\n     *\n     * #### Platform-specific\n     *\n     * - **Windows:** The cursor is only hidden within the confines of the window.\n     * - **macOS:** The cursor is hidden as long as the window has input focus, even if the cursor is\n     *   outside of the window.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/plugin-window';\n     * await getCurrent().setCursorVisible(false);\n     * ```\n     *\n     * @param visible If `false`, this will hide the cursor. If `true`, this will show the cursor.\n     * @returns A promise indicating the success or failure of the operation.\n     *\n     * @since 2.0.0\n     */\n    async setCursorVisible(visible) {\n        return window.__TAURI_INVOKE__(\"plugin:window|set_cursor_visible\", {\n            label: this.label,\n            value: visible,\n        });\n    }\n    /**\n     * Modifies the cursor icon of the window.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/plugin-window';\n     * await getCurrent().setCursorIcon('help');\n     * ```\n     *\n     * @param icon The new cursor icon.\n     * @returns A promise indicating the success or failure of the operation.\n     *\n     * @since 2.0.0\n     */\n    async setCursorIcon(icon) {\n        return window.__TAURI_INVOKE__(\"plugin:window|set_cursor_icon\", {\n            label: this.label,\n            value: icon,\n        });\n    }\n    /**\n     * Changes the position of the cursor in window coordinates.\n     * @example\n     * ```typescript\n     * import { getCurrent, LogicalPosition } from '@tauri-apps/plugin-window';\n     * await getCurrent().setCursorPosition(new LogicalPosition(600, 300));\n     * ```\n     *\n     * @param position The new cursor position.\n     * @returns A promise indicating the success or failure of the operation.\n     *\n     * @since 2.0.0\n     */\n    async setCursorPosition(position) {\n        if (!position ||\n            (position.type !== \"Logical\" && position.type !== \"Physical\")) {\n            throw new Error(\"the `position` argument must be either a LogicalPosition or a PhysicalPosition instance\");\n        }\n        return window.__TAURI_INVOKE__(\"plugin:window|set_cursor_position\", {\n            label: this.label,\n            value: {\n                type: position.type,\n                data: {\n                    x: position.x,\n                    y: position.y,\n                },\n            },\n        });\n    }\n    /**\n     * Changes the cursor events behavior.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/plugin-window';\n     * await getCurrent().setIgnoreCursorEvents(true);\n     * ```\n     *\n     * @param ignore `true` to ignore the cursor events; `false` to process them as usual.\n     * @returns A promise indicating the success or failure of the operation.\n     *\n     * @since 2.0.0\n     */\n    async setIgnoreCursorEvents(ignore) {\n        return window.__TAURI_INVOKE__(\"plugin:window|set_ignore_cursor_events\", {\n            label: this.label,\n            value: ignore,\n        });\n    }\n    /**\n     * Starts dragging the window.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/plugin-window';\n     * await getCurrent().startDragging();\n     * ```\n     *\n     * @return A promise indicating the success or failure of the operation.\n     *\n     * @since 2.0.0\n     */\n    async startDragging() {\n        return window.__TAURI_INVOKE__(\"plugin:window|start_dragging\", {\n            label: this.label,\n        });\n    }\n    // Listeners\n    /**\n     * Listen to window resize.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrent } from \"@tauri-apps/plugin-window\";\n     * const unlisten = await getCurrent().onResized(({ payload: size }) => {\n     *  console.log('Window resized', size);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     *\n     * @since 2.0.0\n     */\n    async onResized(handler) {\n        return this.listen(TauriEvent.WINDOW_RESIZED, (e) => {\n            e.payload = mapPhysicalSize(e.payload);\n            handler(e);\n        });\n    }\n    /**\n     * Listen to window move.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrent } from \"@tauri-apps/plugin-window\";\n     * const unlisten = await getCurrent().onMoved(({ payload: position }) => {\n     *  console.log('Window moved', position);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     *\n     * @since 2.0.0\n     */\n    async onMoved(handler) {\n        return this.listen(TauriEvent.WINDOW_MOVED, (e) => {\n            e.payload = mapPhysicalPosition(e.payload);\n            handler(e);\n        });\n    }\n    /**\n     * Listen to window close requested. Emitted when the user requests to closes the window.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrent } from \"@tauri-apps/plugin-window\";\n     * import { confirm } from '@tauri-apps/api/dialog';\n     * const unlisten = await getCurrent().onCloseRequested(async (event) => {\n     *   const confirmed = await confirm('Are you sure?');\n     *   if (!confirmed) {\n     *     // user did not confirm closing the window; let's prevent it\n     *     event.preventDefault();\n     *   }\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     *\n     * @since 2.0.0\n     */\n    /* eslint-disable @typescript-eslint/promise-function-async */\n    async onCloseRequested(handler) {\n        return this.listen(TauriEvent.WINDOW_CLOSE_REQUESTED, (event) => {\n            const evt = new CloseRequestedEvent(event);\n            void Promise.resolve(handler(evt)).then(() => {\n                if (!evt.isPreventDefault()) {\n                    return this.close();\n                }\n            });\n        });\n    }\n    /* eslint-enable */\n    /**\n     * Listen to window focus change.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrent } from \"@tauri-apps/plugin-window\";\n     * const unlisten = await getCurrent().onFocusChanged(({ payload: focused }) => {\n     *  console.log('Focus changed, window is focused? ' + focused);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     *\n     * @since 2.0.0\n     */\n    async onFocusChanged(handler) {\n        const unlistenFocus = await this.listen(TauriEvent.WINDOW_FOCUS, (event) => {\n            handler({ ...event, payload: true });\n        });\n        const unlistenBlur = await this.listen(TauriEvent.WINDOW_BLUR, (event) => {\n            handler({ ...event, payload: false });\n        });\n        return () => {\n            unlistenFocus();\n            unlistenBlur();\n        };\n    }\n    /**\n     * Listen to window scale change. Emitted when the window's scale factor has changed.\n     * The following user actions can cause DPI changes:\n     * - Changing the display's resolution.\n     * - Changing the display's scale factor (e.g. in Control Panel on Windows).\n     * - Moving the window to a display with a different scale factor.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrent } from \"@tauri-apps/plugin-window\";\n     * const unlisten = await getCurrent().onScaleChanged(({ payload }) => {\n     *  console.log('Scale changed', payload.scaleFactor, payload.size);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     *\n     * @since 2.0.0\n     */\n    async onScaleChanged(handler) {\n        return this.listen(TauriEvent.WINDOW_SCALE_FACTOR_CHANGED, handler);\n    }\n    /**\n     * Listen to the window menu item click. The payload is the item id.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrent } from \"@tauri-apps/plugin-window\";\n     * const unlisten = await getCurrent().onMenuClicked(({ payload: menuId }) => {\n     *  console.log('Menu clicked: ' + menuId);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     *\n     * @since 2.0.0\n     */\n    async onMenuClicked(handler) {\n        return this.listen(TauriEvent.MENU, handler);\n    }\n    /**\n     * Listen to a file drop event.\n     * The listener is triggered when the user hovers the selected files on the window,\n     * drops the files or cancels the operation.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrent } from \"@tauri-apps/plugin-window\";\n     * const unlisten = await getCurrent().onFileDropEvent((event) => {\n     *  if (event.payload.type === 'hover') {\n     *    console.log('User hovering', event.payload.paths);\n     *  } else if (event.payload.type === 'drop') {\n     *    console.log('User dropped', event.payload.paths);\n     *  } else {\n     *    console.log('File drop cancelled');\n     *  }\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     *\n     * @since 2.0.0\n     */\n    async onFileDropEvent(handler) {\n        const unlistenFileDrop = await this.listen(TauriEvent.WINDOW_FILE_DROP, (event) => {\n            handler({ ...event, payload: { type: \"drop\", paths: event.payload } });\n        });\n        const unlistenFileHover = await this.listen(TauriEvent.WINDOW_FILE_DROP_HOVER, (event) => {\n            handler({ ...event, payload: { type: \"hover\", paths: event.payload } });\n        });\n        const unlistenCancel = await this.listen(TauriEvent.WINDOW_FILE_DROP_CANCELLED, (event) => {\n            handler({ ...event, payload: { type: \"cancel\" } });\n        });\n        return () => {\n            unlistenFileDrop();\n            unlistenFileHover();\n            unlistenCancel();\n        };\n    }\n    /**\n     * Listen to the system theme change.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrent } from \"@tauri-apps/plugin-window\";\n     * const unlisten = await getCurrent().onThemeChanged(({ payload: theme }) => {\n     *  console.log('New theme: ' + theme);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     *\n     * @since 2.0.0\n     */\n    async onThemeChanged(handler) {\n        return this.listen(TauriEvent.WINDOW_THEME_CHANGED, handler);\n    }\n}\n/**\n * Platform-specific window effects\n *\n * @since 2.0\n */\nvar Effect;\n(function (Effect) {\n    /**\n     * A default material appropriate for the view's effectiveAppearance.  **macOS 10.14-**\n     *\n     * @deprecated since macOS 10.14. You should instead choose an appropriate semantic material.\n     */\n    Effect[\"AppearanceBased\"] = \"appearanceBased\";\n    /**\n     *  **macOS 10.14-**\n     *\n     * @deprecated since macOS 10.14. Use a semantic material instead.\n     */\n    Effect[\"Light\"] = \"light\";\n    /**\n     *  **macOS 10.14-**\n     *\n     * @deprecated since macOS 10.14. Use a semantic material instead.\n     */\n    Effect[\"Dark\"] = \"dark\";\n    /**\n     *  **macOS 10.14-**\n     *\n     * @deprecated since macOS 10.14. Use a semantic material instead.\n     */\n    Effect[\"MediumLight\"] = \"mediumLight\";\n    /**\n     *  **macOS 10.14-**\n     *\n     * @deprecated since macOS 10.14. Use a semantic material instead.\n     */\n    Effect[\"UltraDark\"] = \"ultraDark\";\n    /**\n     *  **macOS 10.10+**\n     */\n    Effect[\"Titlebar\"] = \"titlebar\";\n    /**\n     *  **macOS 10.10+**\n     */\n    Effect[\"Selection\"] = \"selection\";\n    /**\n     *  **macOS 10.11+**\n     */\n    Effect[\"Menu\"] = \"menu\";\n    /**\n     *  **macOS 10.11+**\n     */\n    Effect[\"Popover\"] = \"popover\";\n    /**\n     *  **macOS 10.11+**\n     */\n    Effect[\"Sidebar\"] = \"sidebar\";\n    /**\n     *  **macOS 10.14+**\n     */\n    Effect[\"HeaderView\"] = \"headerView\";\n    /**\n     *  **macOS 10.14+**\n     */\n    Effect[\"Sheet\"] = \"sheet\";\n    /**\n     *  **macOS 10.14+**\n     */\n    Effect[\"WindowBackground\"] = \"windowBackground\";\n    /**\n     *  **macOS 10.14+**\n     */\n    Effect[\"HudWindow\"] = \"hudWindow\";\n    /**\n     *  **macOS 10.14+**\n     */\n    Effect[\"FullScreenUI\"] = \"fullScreenUI\";\n    /**\n     *  **macOS 10.14+**\n     */\n    Effect[\"Tooltip\"] = \"tooltip\";\n    /**\n     *  **macOS 10.14+**\n     */\n    Effect[\"ContentBackground\"] = \"contentBackground\";\n    /**\n     *  **macOS 10.14+**\n     */\n    Effect[\"UnderWindowBackground\"] = \"underWindowBackground\";\n    /**\n     *  **macOS 10.14+**\n     */\n    Effect[\"UnderPageBackground\"] = \"underPageBackground\";\n    /**\n     *  **Windows 11 Only**\n     */\n    Effect[\"Mica\"] = \"mica\";\n    /**\n     * **Windows 7/10/11(22H1) Only**\n     *\n     * ## Notes\n     *\n     * This effect has bad performance when resizing/dragging the window on Windows 11 build 22621.\n     */\n    Effect[\"Blur\"] = \"blur\";\n    /**\n     * **Windows 10/11**\n     *\n     * ## Notes\n     *\n     * This effect has bad performance when resizing/dragging the window on Windows 10 v1903+ and Windows 11 build 22000.\n     */\n    Effect[\"Acrylic\"] = \"acrylic\";\n})(Effect || (Effect = {}));\n/**\n * Window effect state **macOS only**\n *\n * @see https://developer.apple.com/documentation/appkit/nsvisualeffectview/state\n *\n * @since 2.0\n */\nvar EffectState;\n(function (EffectState) {\n    /**\n     *  Make window effect state follow the window's active state **macOS only**\n     */\n    EffectState[\"FollowsWindowActiveState\"] = \"followsWindowActiveState\";\n    /**\n     *  Make window effect state always active **macOS only**\n     */\n    EffectState[\"Active\"] = \"active\";\n    /**\n     *  Make window effect state always inactive **macOS only**\n     */\n    EffectState[\"Inactive\"] = \"inactive\";\n})(EffectState || (EffectState = {}));\nfunction mapMonitor(m) {\n    return m === null\n        ? null\n        : {\n            name: m.name,\n            scaleFactor: m.scaleFactor,\n            position: mapPhysicalPosition(m.position),\n            size: mapPhysicalSize(m.size),\n        };\n}\nfunction mapPhysicalPosition(m) {\n    return new PhysicalPosition(m.x, m.y);\n}\nfunction mapPhysicalSize(m) {\n    return new PhysicalSize(m.width, m.height);\n}\n/**\n * Returns the monitor on which the window currently resides.\n * Returns `null` if current monitor can't be detected.\n * @example\n * ```typescript\n * import { currentMonitor } from '@tauri-apps/plugin-window';\n * const monitor = currentMonitor();\n * ```\n *\n * @since 2.0.0\n */\nasync function currentMonitor() {\n    return window\n        .__TAURI_INVOKE__(\"plugin:window|current_monitor\")\n        .then(mapMonitor);\n}\n/**\n * Returns the primary monitor of the system.\n * Returns `null` if it can't identify any monitor as a primary one.\n * @example\n * ```typescript\n * import { primaryMonitor } from '@tauri-apps/plugin-window';\n * const monitor = primaryMonitor();\n * ```\n *\n * @since 2.0.0\n */\nasync function primaryMonitor() {\n    return window\n        .__TAURI_INVOKE__(\"plugin:window|primary_monitor\")\n        .then(mapMonitor);\n}\n/**\n * Returns the list of all the monitors available on the system.\n * @example\n * ```typescript\n * import { availableMonitors } from '@tauri-apps/plugin-window';\n * const monitors = availableMonitors();\n * ```\n *\n * @since 2.0.0\n */\nasync function availableMonitors() {\n    return window\n        .__TAURI_INVOKE__(\"plugin:window|available_monitors\")\n        .then((ms) => ms.map(mapMonitor));\n}\n\nexport { CloseRequestedEvent, Effect, EffectState, LogicalPosition, LogicalSize, PhysicalPosition, PhysicalSize, UserAttentionType, Window, availableMonitors, currentMonitor, getAll, getCurrent, primaryMonitor };\n//# sourceMappingURL=index.mjs.map\n"],
  "mappings": ";;;AAAA,IAAI,IAAE,OAAO;AAAe,IAAI,IAAE,CAACA,IAAE,MAAI;AAAC,WAAQC,MAAK,EAAE,GAAED,IAAEC,IAAE,EAAC,KAAI,EAAEA,EAAC,GAAE,YAAW,KAAE,CAAC;AAAC;AAAE,IAAI,IAAE,CAACD,IAAE,GAAEC,OAAI;AAAC,MAAG,CAAC,EAAE,IAAID,EAAC,EAAE,OAAM,UAAU,YAAUC,EAAC;AAAC;AAAE,IAAI,IAAE,CAACD,IAAE,GAAEC,QAAK,EAAED,IAAE,GAAE,yBAAyB,GAAEC,KAAEA,GAAE,KAAKD,EAAC,IAAE,EAAE,IAAIA,EAAC;AAApE,IAAuE,IAAE,CAACA,IAAE,GAAEC,OAAI;AAAC,MAAG,EAAE,IAAID,EAAC,EAAE,OAAM,UAAU,mDAAmD;AAAE,eAAa,UAAQ,EAAE,IAAIA,EAAC,IAAE,EAAE,IAAIA,IAAEC,EAAC;AAAC;AAA5M,IAA8M,IAAE,CAACD,IAAE,GAAEC,IAAE,OAAK,EAAED,IAAE,GAAE,wBAAwB,GAAE,IAAE,EAAE,KAAKA,IAAEC,EAAC,IAAE,EAAE,IAAID,IAAEC,EAAC,GAAEA;;;ACA7W,IAAIC,KAAE,CAAC;AAAE,EAAEA,IAAE,EAAC,SAAQ,MAAI,GAAE,gBAAe,MAAI,GAAE,mBAAkB,MAAI,GAAE,gBAAe,MAAI,GAAE,QAAO,MAAI,GAAE,mBAAkB,MAAI,EAAC,CAAC;AAAE,SAASC,KAAG;AAAC,SAAO,OAAO,OAAO,gBAAgB,IAAI,YAAY,CAAC,CAAC,EAAE,CAAC;AAAC;AAAC,SAAS,EAAE,GAAEC,KAAE,OAAG;AAAC,MAAI,IAAED,GAAE,GAAE,IAAE,IAAI,CAAC;AAAG,SAAO,OAAO,eAAe,QAAO,GAAE,EAAC,OAAM,CAAAE,QAAID,MAAG,QAAQ,eAAe,QAAO,CAAC,GAAE,IAAIC,EAAC,IAAG,UAAS,OAAG,cAAa,KAAE,CAAC,GAAE;AAAC;AAAC,IAAIC;AAAJ,IAAM,IAAE,MAAK;AAAA,EAAC,cAAa;AAAC,SAAK,2BAAyB;AAAG,MAAE,MAAKA,IAAE,MAAI;AAAA,IAAC,CAAC;AAAE,SAAK,KAAG,EAAE,CAAAF,OAAG;AAAC,QAAE,MAAKE,EAAC,EAAE,KAAK,MAAKF,EAAC;AAAA,IAAC,CAAC;AAAA,EAAC;AAAA,EAAC,IAAI,UAAUA,IAAE;AAAC,MAAE,MAAKE,IAAEF,EAAC;AAAA,EAAC;AAAA,EAAC,IAAI,YAAW;AAAC,WAAO,EAAE,MAAKE,EAAC;AAAA,EAAC;AAAA,EAAC,SAAQ;AAAC,WAAM,eAAe,KAAK,EAAE;AAAA,EAAE;AAAC;AAAEA,KAAE,oBAAI;AAAQ,IAAI,IAAE,MAAK;AAAA,EAAC,YAAYF,IAAE,GAAE,GAAE;AAAC,SAAK,SAAOA,IAAE,KAAK,QAAM,GAAE,KAAK,YAAU;AAAA,EAAC;AAAA,EAAC,MAAM,aAAY;AAAC,WAAO,EAAE,UAAU,KAAK,MAAM,oBAAmB,EAAC,OAAM,KAAK,OAAM,WAAU,KAAK,UAAS,CAAC;AAAA,EAAC;AAAC;AAAE,eAAe,EAAE,GAAEA,IAAE,GAAE;AAAC,MAAI,IAAE,IAAI;AAAE,SAAO,EAAE,YAAU,GAAE,EAAE,UAAU,CAAC,sBAAqB,EAAC,OAAMA,IAAE,SAAQ,EAAC,CAAC,EAAE,KAAK,MAAI,IAAI,EAAE,GAAEA,IAAE,EAAE,EAAE,CAAC;AAAC;AAAC,eAAe,EAAE,GAAEA,KAAE,CAAC,GAAE,GAAE;AAAC,SAAO,IAAI,QAAQ,CAAC,GAAEC,OAAI;AAAC,QAAIE,KAAE,EAAE,OAAG;AAAC,QAAE,CAAC,GAAE,QAAQ,eAAe,QAAO,IAAI,CAAC,EAAE;AAAA,IAAC,GAAE,IAAE,GAAE,IAAE,EAAE,OAAG;AAAC,MAAAF,GAAE,CAAC,GAAE,QAAQ,eAAe,QAAO,IAAIE,EAAC,EAAE;AAAA,IAAC,GAAE,IAAE;AAAE,WAAO,cAAc,EAAC,KAAI,GAAE,UAASA,IAAE,OAAM,GAAE,SAAQH,IAAE,SAAQ,EAAC,CAAC;AAAA,EAAC,CAAC;AAAC;AAAC,SAAS,EAAE,GAAEA,KAAE,SAAQ;AAAC,SAAO,OAAO,UAAU,eAAe,GAAEA,EAAC;AAAC;;;ACAjsC,IAAI,IAAE,CAAC;AAAE,EAAE,GAAE,EAAC,YAAW,MAAI,GAAE,MAAK,MAAI,GAAE,QAAO,MAAI,GAAE,MAAK,MAAI,EAAC,CAAC;AAAE,IAAI,KAAG,CAAAI,QAAIA,GAAE,iBAAe,kBAAiBA,GAAE,eAAa,gBAAeA,GAAE,yBAAuB,2BAA0BA,GAAE,iBAAe,0BAAyBA,GAAE,mBAAiB,qBAAoBA,GAAE,eAAa,iBAAgBA,GAAE,cAAY,gBAAeA,GAAE,8BAA4B,wBAAuBA,GAAE,uBAAqB,yBAAwBA,GAAE,mBAAiB,qBAAoBA,GAAE,yBAAuB,2BAA0BA,GAAE,6BAA2B,+BAA8BA,GAAE,OAAK,gBAAeA,KAAI,KAAG,CAAC,CAAC;AAAE,eAAeC,GAAE,GAAE,GAAE;AAAC,QAAM,EAAE,yBAAwB,EAAC,OAAM,GAAE,SAAQ,EAAC,CAAC;AAAC;AAAC,eAAe,EAAE,GAAE,GAAEC,IAAE;AAAC,SAAO,EAAE,uBAAsB,EAAC,OAAM,GAAE,aAAYA,IAAG,QAAO,SAAQ,EAAE,CAAC,EAAC,CAAC,EAAE,KAAK,OAAG,YAASD,GAAE,GAAE,CAAC,CAAC;AAAC;AAAC,eAAe,EAAE,GAAE,GAAEC,IAAE;AAAC,SAAO,EAAE,GAAE,OAAG;AAAC,MAAE,CAAC,GAAED,GAAE,GAAE,EAAE,EAAE,EAAE,MAAM,MAAI;AAAA,IAAC,CAAC;AAAA,EAAC,GAAEC,EAAC;AAAC;AAAC,eAAe,EAAE,GAAE,GAAEA,IAAE;AAAC,QAAM,EAAE,qBAAoB,EAAC,OAAM,GAAE,aAAYA,IAAG,QAAO,SAAQ,EAAC,CAAC;AAAC;;;ACU/iC,IAAM,cAAN,MAAkB;AAAA,EACd,YAAY,OAAO,QAAQ;AACvB,SAAK,OAAO;AACZ,SAAK,QAAQ;AACb,SAAK,SAAS;AAAA,EAClB;AACJ;AAMA,IAAM,eAAN,MAAmB;AAAA,EACf,YAAY,OAAO,QAAQ;AACvB,SAAK,OAAO;AACZ,SAAK,QAAQ;AACb,SAAK,SAAS;AAAA,EAClB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,UAAU,aAAa;AACnB,WAAO,IAAI,YAAY,KAAK,QAAQ,aAAa,KAAK,SAAS,WAAW;AAAA,EAC9E;AACJ;AAMA,IAAM,kBAAN,MAAsB;AAAA,EAClB,YAAY,GAAGC,IAAG;AACd,SAAK,OAAO;AACZ,SAAK,IAAI;AACT,SAAK,IAAIA;AAAA,EACb;AACJ;AAMA,IAAM,mBAAN,MAAuB;AAAA,EACnB,YAAY,GAAGA,IAAG;AACd,SAAK,OAAO;AACZ,SAAK,IAAI;AACT,SAAK,IAAIA;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,UAAU,aAAa;AACnB,WAAO,IAAI,gBAAgB,KAAK,IAAI,aAAa,KAAK,IAAI,WAAW;AAAA,EACzE;AACJ;AAMA,IAAI;AAAA,CACH,SAAUC,oBAAmB;AAM1B,EAAAA,mBAAkBA,mBAAkB,UAAU,IAAI,CAAC,IAAI;AAMvD,EAAAA,mBAAkBA,mBAAkB,eAAe,IAAI,CAAC,IAAI;AAChE,GAAG,sBAAsB,oBAAoB,CAAC,EAAE;AAChD,IAAM,sBAAN,MAA0B;AAAA,EACtB,YAAY,OAAO;AACf,SAAK,kBAAkB;AACvB,SAAK,QAAQ,MAAM;AACnB,SAAK,cAAc,MAAM;AACzB,SAAK,KAAK,MAAM;AAAA,EACpB;AAAA,EACA,iBAAiB;AACb,SAAK,kBAAkB;AAAA,EAC3B;AAAA,EACA,mBAAmB;AACf,WAAO,KAAK;AAAA,EAChB;AACJ;AAMA,SAAS,aAAa;AAClB,SAAO,IAAI,OAAO,OAAO,mBAAmB,gBAAgB,OAAO;AAAA;AAAA,IAE/D,MAAM;AAAA,EACV,CAAC;AACL;AAMA,SAAS,SAAS;AACd,SAAO,OAAO,mBAAmB,UAAU,IAAI,CAAC,MAAM,IAAI,OAAO,EAAE,OAAO;AAAA;AAAA,IAEtE,MAAM;AAAA,EACV,CAAC,CAAC;AACN;AAGA,IAAM,mBAAmB,CAAC,mBAAmB,eAAe;AAkC5D,IAAM,SAAN,MAAM,QAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsBT,YAAY,OAAO,UAAU,CAAC,GAAG;AAC7B,SAAK,QAAQ;AACb,SAAK,YAAY,uBAAO,OAAO,IAAI;AAEnC,QAAI,EAAE,YAAY,QAAQ,YAAY,SAAS,SAAS,QAAQ,OAAO;AACnE,aACK,iBAAiB,wBAAwB;AAAA,QAC1C,SAAS;AAAA,UACL,GAAG;AAAA,UACH;AAAA,QACJ;AAAA,MACJ,CAAC,EACI,KAAK,YAAY,KAAK,KAAK,iBAAiB,CAAC,EAC7C,MAAM,OAAOC,OAAM,KAAK,KAAK,iBAAiBA,EAAC,CAAC;AAAA,IACzD;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,OAAO,WAAW,OAAO;AACrB,QAAI,OAAO,EAAE,KAAK,CAAC,MAAM,EAAE,UAAU,KAAK,GAAG;AAEzC,aAAO,IAAI,QAAO,OAAO,EAAE,MAAM,KAAK,CAAC;AAAA,IAC3C;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,aAAa;AAChB,WAAO,WAAW;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,SAAS;AACZ,WAAO,OAAO;AAAA,EAClB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,aAAa,mBAAmB;AAC5B,eAAW,KAAK,OAAO,GAAG;AACtB,UAAI,MAAM,EAAE,UAAU,GAAG;AACrB,eAAO;AAAA,MACX;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsBA,MAAM,OAAO,OAAO,SAAS;AACzB,QAAI,KAAK,kBAAkB,OAAO,OAAO,GAAG;AACxC,aAAO,QAAQ,QAAQ,MAAM;AAEzB,cAAM,YAAY,KAAK,UAAU,KAAK;AACtC,kBAAU,OAAO,UAAU,QAAQ,OAAO,GAAG,CAAC;AAAA,MAClD,CAAC;AAAA,IACL;AACA,WAAO,EAAO,OAAO,SAAS,EAAE,QAAQ,KAAK,MAAM,CAAC;AAAA,EACxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsBA,MAAM,KAAK,OAAO,SAAS;AACvB,QAAI,KAAK,kBAAkB,OAAO,OAAO,GAAG;AACxC,aAAO,QAAQ,QAAQ,MAAM;AAEzB,cAAM,YAAY,KAAK,UAAU,KAAK;AACtC,kBAAU,OAAO,UAAU,QAAQ,OAAO,GAAG,CAAC;AAAA,MAClD,CAAC;AAAA,IACL;AACA,WAAO,EAAK,OAAO,SAAS,EAAE,QAAQ,KAAK,MAAM,CAAC;AAAA,EACtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,MAAM,KAAK,OAAO,SAAS;AACvB,QAAI,iBAAiB,SAAS,KAAK,GAAG;AAElC,iBAAW,WAAW,KAAK,UAAU,KAAK,KAAK,CAAC,GAAG;AAC/C,gBAAQ,EAAE,OAAO,IAAI,IAAI,aAAa,KAAK,OAAO,QAAQ,CAAC;AAAA,MAC/D;AACA,aAAO,QAAQ,QAAQ;AAAA,IAC3B;AACA,WAAO,EAAK,OAAO,SAAS,EAAE,QAAQ,KAAK,MAAM,CAAC;AAAA,EACtD;AAAA;AAAA,EAEA,kBAAkB,OAAO,SAAS;AAC9B,QAAI,iBAAiB,SAAS,KAAK,GAAG;AAClC,UAAI,EAAE,SAAS,KAAK,YAAY;AAE5B,aAAK,UAAU,KAAK,IAAI,CAAC,OAAO;AAAA,MACpC,OACK;AAED,aAAK,UAAU,KAAK,EAAE,KAAK,OAAO;AAAA,MACtC;AACA,aAAO;AAAA,IACX;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,MAAM,cAAc;AAChB,WAAO,OAAO,iBAAiB,8BAA8B;AAAA,MACzD,OAAO,KAAK;AAAA,IAChB,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,MAAM,gBAAgB;AAClB,WAAO,OACF,iBAAiB,gCAAgC;AAAA,MAClD,OAAO,KAAK;AAAA,IAChB,CAAC,EACI,KAAK,CAAC,EAAE,GAAG,GAAAF,GAAE,MAAM,IAAI,iBAAiB,GAAGA,EAAC,CAAC;AAAA,EACtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,MAAM,gBAAgB;AAClB,WAAO,OACF,iBAAiB,gCAAgC;AAAA,MAClD,OAAO,KAAK;AAAA,IAChB,CAAC,EACI,KAAK,CAAC,EAAE,GAAG,GAAAA,GAAE,MAAM,IAAI,iBAAiB,GAAGA,EAAC,CAAC;AAAA,EACtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,MAAM,YAAY;AACd,WAAO,OACF,iBAAiB,4BAA4B;AAAA,MAC9C,OAAO,KAAK;AAAA,IAChB,CAAC,EACI,KAAK,CAAC,EAAE,OAAO,OAAO,MAAM,IAAI,aAAa,OAAO,MAAM,CAAC;AAAA,EACpE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,MAAM,YAAY;AACd,WAAO,OACF,iBAAiB,4BAA4B;AAAA,MAC9C,OAAO,KAAK;AAAA,IAChB,CAAC,EACI,KAAK,CAAC,EAAE,OAAO,OAAO,MAAM,IAAI,aAAa,OAAO,MAAM,CAAC;AAAA,EACpE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,MAAM,eAAe;AACjB,WAAO,OAAO,iBAAiB,+BAA+B;AAAA,MAC1D,OAAO,KAAK;AAAA,IAChB,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,MAAM,cAAc;AAChB,WAAO,OAAO,iBAAiB,8BAA8B;AAAA,MACzD,OAAO,KAAK;AAAA,IAChB,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,MAAM,cAAc;AAChB,WAAO,OAAO,iBAAiB,8BAA8B;AAAA,MACzD,OAAO,KAAK;AAAA,IAChB,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,MAAM,YAAY;AACd,WAAO,OAAO,iBAAiB,4BAA4B;AAAA,MACvD,OAAO,KAAK;AAAA,IAChB,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,MAAM,cAAc;AAChB,WAAO,OAAO,iBAAiB,8BAA8B;AAAA,MACzD,OAAO,KAAK;AAAA,IAChB,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,MAAM,cAAc;AAChB,WAAO,OAAO,iBAAiB,8BAA8B;AAAA,MACzD,OAAO,KAAK;AAAA,IAChB,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBA,MAAM,gBAAgB;AAClB,WAAO,OAAO,iBAAiB,gCAAgC;AAAA,MAC3D,OAAO,KAAK;AAAA,IAChB,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBA,MAAM,gBAAgB;AAClB,WAAO,OAAO,iBAAiB,gCAAgC;AAAA,MAC3D,OAAO,KAAK;AAAA,IAChB,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBA,MAAM,aAAa;AACf,WAAO,OAAO,iBAAiB,6BAA6B;AAAA,MACxD,OAAO,KAAK;AAAA,IAChB,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,MAAM,YAAY;AACd,WAAO,OAAO,iBAAiB,4BAA4B;AAAA,MACvD,OAAO,KAAK;AAAA,IAChB,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,MAAM,QAAQ;AACV,WAAO,OAAO,iBAAiB,uBAAuB;AAAA,MAClD,OAAO,KAAK;AAAA,IAChB,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBA,MAAM,QAAQ;AACV,WAAO,OAAO,iBAAiB,uBAAuB;AAAA,MAClD,OAAO,KAAK;AAAA,IAChB,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,MAAM,SAAS;AACX,WAAO,OAAO,iBAAiB,wBAAwB;AAAA,MACnD,OAAO,KAAK;AAAA,IAChB,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAwBA,MAAM,qBAAqB,aAAa;AACpC,QAAI,eAAe;AACnB,QAAI,aAAa;AACb,UAAI,gBAAgB,kBAAkB,UAAU;AAC5C,uBAAe,EAAE,MAAM,WAAW;AAAA,MACtC,OACK;AACD,uBAAe,EAAE,MAAM,gBAAgB;AAAA,MAC3C;AAAA,IACJ;AACA,WAAO,OAAO,iBAAiB,wCAAwC;AAAA,MACnE,OAAO,KAAK;AAAA,MACZ,OAAO;AAAA,IACX,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,MAAM,aAAa,WAAW;AAC1B,WAAO,OAAO,iBAAiB,+BAA+B;AAAA,MAC1D,OAAO,KAAK;AAAA,MACZ,OAAO;AAAA,IACX,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmBA,MAAM,eAAe,aAAa;AAC9B,WAAO,OAAO,iBAAiB,iCAAiC;AAAA,MAC5D,OAAO,KAAK;AAAA,MACZ,OAAO;AAAA,IACX,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiBA,MAAM,eAAe,aAAa;AAC9B,WAAO,OAAO,iBAAiB,iCAAiC;AAAA,MAC5D,OAAO,KAAK;AAAA,MACZ,OAAO;AAAA,IACX,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBA,MAAM,YAAY,UAAU;AACxB,WAAO,OAAO,iBAAiB,8BAA8B;AAAA,MACzD,OAAO,KAAK;AAAA,MACZ,OAAO;AAAA,IACX,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,MAAM,SAAS,OAAO;AAClB,WAAO,OAAO,iBAAiB,2BAA2B;AAAA,MACtD,OAAO,KAAK;AAAA,MACZ,OAAO;AAAA,IACX,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,MAAM,WAAW;AACb,WAAO,OAAO,iBAAiB,0BAA0B;AAAA,MACrD,OAAO,KAAK;AAAA,IAChB,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,MAAM,aAAa;AACf,WAAO,OAAO,iBAAiB,4BAA4B;AAAA,MACvD,OAAO,KAAK;AAAA,IAChB,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,MAAM,iBAAiB;AACnB,WAAO,OAAO,iBAAiB,iCAAiC;AAAA,MAC5D,OAAO,KAAK;AAAA,IAChB,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,MAAM,WAAW;AACb,WAAO,OAAO,iBAAiB,0BAA0B;AAAA,MACrD,OAAO,KAAK;AAAA,IAChB,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,MAAM,aAAa;AACf,WAAO,OAAO,iBAAiB,4BAA4B;AAAA,MACvD,OAAO,KAAK;AAAA,IAChB,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,MAAM,OAAO;AACT,WAAO,OAAO,iBAAiB,sBAAsB;AAAA,MACjD,OAAO,KAAK;AAAA,IAChB,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,MAAM,OAAO;AACT,WAAO,OAAO,iBAAiB,sBAAsB;AAAA,MACjD,OAAO,KAAK;AAAA,IAChB,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,MAAM,QAAQ;AACV,WAAO,OAAO,iBAAiB,uBAAuB;AAAA,MAClD,OAAO,KAAK;AAAA,IAChB,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,MAAM,eAAe,aAAa;AAC9B,WAAO,OAAO,iBAAiB,iCAAiC;AAAA,MAC5D,OAAO,KAAK;AAAA,MACZ,OAAO;AAAA,IACX,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsBA,MAAM,UAAU,QAAQ;AACpB,WAAO,OAAO,iBAAiB,4BAA4B;AAAA,MACvD,OAAO,KAAK;AAAA,MACZ,OAAO;AAAA,IACX,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,WAAW,SAAS;AACtB,WAAO,OAAO,iBAAiB,6BAA6B;AAAA,MACxD,OAAO,KAAK;AAAA,MACZ,OAAO;AAAA,IACX,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,eAAe;AACjB,WAAO,OAAO,iBAAiB,6BAA6B;AAAA,MACxD,OAAO,KAAK;AAAA,MACZ,OAAO;AAAA,IACX,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,MAAM,eAAe,aAAa;AAC9B,WAAO,OAAO,iBAAiB,mCAAmC;AAAA,MAC9D,OAAO,KAAK;AAAA,MACZ,OAAO;AAAA,IACX,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,MAAM,oBAAoB,YAAY;AAClC,WAAO,OAAO,iBAAiB,uCAAuC;AAAA,MAClE,OAAO,KAAK;AAAA,MACZ,OAAO;AAAA,IACX,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,MAAM,QAAQ,MAAM;AAChB,QAAI,CAAC,QAAS,KAAK,SAAS,aAAa,KAAK,SAAS,YAAa;AAChE,YAAM,IAAI,MAAM,6EAA6E;AAAA,IACjG;AACA,WAAO,OAAO,iBAAiB,0BAA0B;AAAA,MACrD,OAAO,KAAK;AAAA,MACZ,OAAO;AAAA,QACH,MAAM,KAAK;AAAA,QACX,MAAM;AAAA,UACF,OAAO,KAAK;AAAA,UACZ,QAAQ,KAAK;AAAA,QACjB;AAAA,MACJ;AAAA,IACJ,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,MAAM,WAAW,MAAM;AACnB,QAAI,QAAQ,KAAK,SAAS,aAAa,KAAK,SAAS,YAAY;AAC7D,YAAM,IAAI,MAAM,6EAA6E;AAAA,IACjG;AACA,WAAO,OAAO,iBAAiB,8BAA8B;AAAA,MACzD,OAAO,KAAK;AAAA,MACZ,OAAO,OACD;AAAA,QACE,MAAM,KAAK;AAAA,QACX,MAAM;AAAA,UACF,OAAO,KAAK;AAAA,UACZ,QAAQ,KAAK;AAAA,QACjB;AAAA,MACJ,IACE;AAAA,IACV,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,MAAM,WAAW,MAAM;AACnB,QAAI,QAAQ,KAAK,SAAS,aAAa,KAAK,SAAS,YAAY;AAC7D,YAAM,IAAI,MAAM,6EAA6E;AAAA,IACjG;AACA,WAAO,OAAO,iBAAiB,8BAA8B;AAAA,MACzD,OAAO,KAAK;AAAA,MACZ,OAAO,OACD;AAAA,QACE,MAAM,KAAK;AAAA,QACX,MAAM;AAAA,UACF,OAAO,KAAK;AAAA,UACZ,QAAQ,KAAK;AAAA,QACjB;AAAA,MACJ,IACE;AAAA,IACV,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,MAAM,YAAY,UAAU;AACxB,QAAI,CAAC,YACA,SAAS,SAAS,aAAa,SAAS,SAAS,YAAa;AAC/D,YAAM,IAAI,MAAM,yFAAyF;AAAA,IAC7G;AACA,WAAO,OAAO,iBAAiB,8BAA8B;AAAA,MACzD,OAAO,KAAK;AAAA,MACZ,OAAO;AAAA,QACH,MAAM,SAAS;AAAA,QACf,MAAM;AAAA,UACF,GAAG,SAAS;AAAA,UACZ,GAAG,SAAS;AAAA,QAChB;AAAA,MACJ;AAAA,IACJ,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,MAAM,cAAc,YAAY;AAC5B,WAAO,OAAO,iBAAiB,gCAAgC;AAAA,MAC3D,OAAO,KAAK;AAAA,MACZ,OAAO;AAAA,IACX,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,MAAM,WAAW;AACb,WAAO,OAAO,iBAAiB,2BAA2B;AAAA,MACtD,OAAO,KAAK;AAAA,IAChB,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAqBA,MAAM,QAAQ,MAAM;AAChB,WAAO,OAAO,iBAAiB,0BAA0B;AAAA,MACrD,OAAO,KAAK;AAAA,MACZ,OAAO,OAAO,SAAS,WAAW,OAAO,MAAM,KAAK,IAAI;AAAA,IAC5D,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBA,MAAM,eAAe,MAAM;AACvB,WAAO,OAAO,iBAAiB,kCAAkC;AAAA,MAC7D,OAAO,KAAK;AAAA,MACZ,OAAO;AAAA,IACX,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsBA,MAAM,cAAc,MAAM;AACtB,WAAO,OAAO,iBAAiB,iCAAiC;AAAA,MAC5D,OAAO,KAAK;AAAA,MACZ,OAAO;AAAA,IACX,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAoBA,MAAM,iBAAiB,SAAS;AAC5B,WAAO,OAAO,iBAAiB,oCAAoC;AAAA,MAC/D,OAAO,KAAK;AAAA,MACZ,OAAO;AAAA,IACX,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,MAAM,cAAc,MAAM;AACtB,WAAO,OAAO,iBAAiB,iCAAiC;AAAA,MAC5D,OAAO,KAAK;AAAA,MACZ,OAAO;AAAA,IACX,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,MAAM,kBAAkB,UAAU;AAC9B,QAAI,CAAC,YACA,SAAS,SAAS,aAAa,SAAS,SAAS,YAAa;AAC/D,YAAM,IAAI,MAAM,yFAAyF;AAAA,IAC7G;AACA,WAAO,OAAO,iBAAiB,qCAAqC;AAAA,MAChE,OAAO,KAAK;AAAA,MACZ,OAAO;AAAA,QACH,MAAM,SAAS;AAAA,QACf,MAAM;AAAA,UACF,GAAG,SAAS;AAAA,UACZ,GAAG,SAAS;AAAA,QAChB;AAAA,MACJ;AAAA,IACJ,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,MAAM,sBAAsB,QAAQ;AAChC,WAAO,OAAO,iBAAiB,0CAA0C;AAAA,MACrE,OAAO,KAAK;AAAA,MACZ,OAAO;AAAA,IACX,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,MAAM,gBAAgB;AAClB,WAAO,OAAO,iBAAiB,gCAAgC;AAAA,MAC3D,OAAO,KAAK;AAAA,IAChB,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAqBA,MAAM,UAAU,SAAS;AACrB,WAAO,KAAK,OAAO,EAAW,gBAAgB,CAACE,OAAM;AACjD,MAAAA,GAAE,UAAU,gBAAgBA,GAAE,OAAO;AACrC,cAAQA,EAAC;AAAA,IACb,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAoBA,MAAM,QAAQ,SAAS;AACnB,WAAO,KAAK,OAAO,EAAW,cAAc,CAACA,OAAM;AAC/C,MAAAA,GAAE,UAAU,oBAAoBA,GAAE,OAAO;AACzC,cAAQA,EAAC;AAAA,IACb,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA0BA,MAAM,iBAAiB,SAAS;AAC5B,WAAO,KAAK,OAAO,EAAW,wBAAwB,CAAC,UAAU;AAC7D,YAAM,MAAM,IAAI,oBAAoB,KAAK;AACzC,WAAK,QAAQ,QAAQ,QAAQ,GAAG,CAAC,EAAE,KAAK,MAAM;AAC1C,YAAI,CAAC,IAAI,iBAAiB,GAAG;AACzB,iBAAO,KAAK,MAAM;AAAA,QACtB;AAAA,MACJ,CAAC;AAAA,IACL,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAqBA,MAAM,eAAe,SAAS;AAC1B,UAAM,gBAAgB,MAAM,KAAK,OAAO,EAAW,cAAc,CAAC,UAAU;AACxE,cAAQ,EAAE,GAAG,OAAO,SAAS,KAAK,CAAC;AAAA,IACvC,CAAC;AACD,UAAM,eAAe,MAAM,KAAK,OAAO,EAAW,aAAa,CAAC,UAAU;AACtE,cAAQ,EAAE,GAAG,OAAO,SAAS,MAAM,CAAC;AAAA,IACxC,CAAC;AACD,WAAO,MAAM;AACT,oBAAc;AACd,mBAAa;AAAA,IACjB;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAwBA,MAAM,eAAe,SAAS;AAC1B,WAAO,KAAK,OAAO,EAAW,6BAA6B,OAAO;AAAA,EACtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAoBA,MAAM,cAAc,SAAS;AACzB,WAAO,KAAK,OAAO,EAAW,MAAM,OAAO;AAAA,EAC/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA4BA,MAAM,gBAAgB,SAAS;AAC3B,UAAM,mBAAmB,MAAM,KAAK,OAAO,EAAW,kBAAkB,CAAC,UAAU;AAC/E,cAAQ,EAAE,GAAG,OAAO,SAAS,EAAE,MAAM,QAAQ,OAAO,MAAM,QAAQ,EAAE,CAAC;AAAA,IACzE,CAAC;AACD,UAAM,oBAAoB,MAAM,KAAK,OAAO,EAAW,wBAAwB,CAAC,UAAU;AACtF,cAAQ,EAAE,GAAG,OAAO,SAAS,EAAE,MAAM,SAAS,OAAO,MAAM,QAAQ,EAAE,CAAC;AAAA,IAC1E,CAAC;AACD,UAAM,iBAAiB,MAAM,KAAK,OAAO,EAAW,4BAA4B,CAAC,UAAU;AACvF,cAAQ,EAAE,GAAG,OAAO,SAAS,EAAE,MAAM,SAAS,EAAE,CAAC;AAAA,IACrD,CAAC;AACD,WAAO,MAAM;AACT,uBAAiB;AACjB,wBAAkB;AAClB,qBAAe;AAAA,IACnB;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAoBA,MAAM,eAAe,SAAS;AAC1B,WAAO,KAAK,OAAO,EAAW,sBAAsB,OAAO;AAAA,EAC/D;AACJ;AAMA,IAAI;AAAA,CACH,SAAUC,SAAQ;AAMf,EAAAA,QAAO,iBAAiB,IAAI;AAM5B,EAAAA,QAAO,OAAO,IAAI;AAMlB,EAAAA,QAAO,MAAM,IAAI;AAMjB,EAAAA,QAAO,aAAa,IAAI;AAMxB,EAAAA,QAAO,WAAW,IAAI;AAItB,EAAAA,QAAO,UAAU,IAAI;AAIrB,EAAAA,QAAO,WAAW,IAAI;AAItB,EAAAA,QAAO,MAAM,IAAI;AAIjB,EAAAA,QAAO,SAAS,IAAI;AAIpB,EAAAA,QAAO,SAAS,IAAI;AAIpB,EAAAA,QAAO,YAAY,IAAI;AAIvB,EAAAA,QAAO,OAAO,IAAI;AAIlB,EAAAA,QAAO,kBAAkB,IAAI;AAI7B,EAAAA,QAAO,WAAW,IAAI;AAItB,EAAAA,QAAO,cAAc,IAAI;AAIzB,EAAAA,QAAO,SAAS,IAAI;AAIpB,EAAAA,QAAO,mBAAmB,IAAI;AAI9B,EAAAA,QAAO,uBAAuB,IAAI;AAIlC,EAAAA,QAAO,qBAAqB,IAAI;AAIhC,EAAAA,QAAO,MAAM,IAAI;AAQjB,EAAAA,QAAO,MAAM,IAAI;AAQjB,EAAAA,QAAO,SAAS,IAAI;AACxB,GAAG,WAAW,SAAS,CAAC,EAAE;AAQ1B,IAAI;AAAA,CACH,SAAUC,cAAa;AAIpB,EAAAA,aAAY,0BAA0B,IAAI;AAI1C,EAAAA,aAAY,QAAQ,IAAI;AAIxB,EAAAA,aAAY,UAAU,IAAI;AAC9B,GAAG,gBAAgB,cAAc,CAAC,EAAE;AACpC,SAAS,WAAWC,IAAG;AACnB,SAAOA,OAAM,OACP,OACA;AAAA,IACE,MAAMA,GAAE;AAAA,IACR,aAAaA,GAAE;AAAA,IACf,UAAU,oBAAoBA,GAAE,QAAQ;AAAA,IACxC,MAAM,gBAAgBA,GAAE,IAAI;AAAA,EAChC;AACR;AACA,SAAS,oBAAoBA,IAAG;AAC5B,SAAO,IAAI,iBAAiBA,GAAE,GAAGA,GAAE,CAAC;AACxC;AACA,SAAS,gBAAgBA,IAAG;AACxB,SAAO,IAAI,aAAaA,GAAE,OAAOA,GAAE,MAAM;AAC7C;AAYA,eAAe,iBAAiB;AAC5B,SAAO,OACF,iBAAiB,+BAA+B,EAChD,KAAK,UAAU;AACxB;AAYA,eAAe,iBAAiB;AAC5B,SAAO,OACF,iBAAiB,+BAA+B,EAChD,KAAK,UAAU;AACxB;AAWA,eAAe,oBAAoB;AAC/B,SAAO,OACF,iBAAiB,kCAAkC,EACnD,KAAK,CAAC,OAAO,GAAG,IAAI,UAAU,CAAC;AACxC;",
  "names": ["a", "c", "h", "f", "e", "c", "i", "g", "e", "s", "i", "y", "UserAttentionType", "e", "Effect", "EffectState", "m"]
}
